//This is an example of React Native
//Pagination to Load More Data dynamically - Infinite List
import React, { Component } from 'react';
//import react in our code.
import {
  View,
  Text,
  StyleSheet,
  FlatList,
  ActivityIndicator,
  Image,
  ScrollView,
  Alert,
  TextInput,
  TouchableOpacity,
  Dimensions
} from 'react-native';
import AlertPro from "react-native-alert-pro";
import DatePicker from 'react-native-datepicker';
import RNPickerSelect from 'react-native-picker-select';
var width = Dimensions.get('window').width; //full width
var height = Dimensions.get('window').height; //full height


import CONSTANTS from '../constants';

//import all the components we are going to use.
 import SearchBar from 'react-native-search-bar';
//import SearchBar from "react-native-dynamic-search-bar";
import { connect } from 'react-redux';
import { SET_USER_INFO } from '../AppState';
import { colors, fonts } from '../../styles';
const saveIcon = require('../../../assets/images/save.png');
import { SET_PAGE_REFERSH,SET_RIGHT_ICON_SHOW } from '../AppState';
import i18n from '../../translations';
import NetInfo from "@react-native-community/netinfo";
  
 let uri='';
 let uploadUrl='';


 const settings = {
   uri,
    uploadUrl,
   data: {
    // extra fields to send in the multipart payload
  }
};
 

 class ItemseditScreen extends Component {
  constructor(props) {
    super(props);
    this.state = {
          company_id:'',
          notificationTitle:'',      
          notificationMessage:'',
          name:this.props.editData.name,
          price:this.props.editData.price,
          description:this.props.editData.description,
          auth_token:this.props.editData.auth_token,
          id:this.props.editData.id,
          category:[],
          category_ids:[],
          itemCategoriesPrice:[],
          unit:parseInt(this.props.editData.unit),
          isDisabled:false,
          categories:[],
          units:[],
    };
   }
 

 
 

 async componentDidMount() {
 
  this._unsubscribe = this.props.navigation.addListener('focus', () => {
                this.props.setHeaderRightIconShow(false);
       });
       var categories=  await this.getCategories();
       this.setState({ categories:categories })

        var units=  await this.getUnits();
        this.setState({ units:units })

       this.setState({company_id:this.props.userInfo.company_id})

        var itemCategories=  await this.getItemCategories();
        this.setState({ itemCategoriesPrice:itemCategories })

        this.state.categories.map((arr, index) => {


          console.log('---------Start------------------')
                   itemCategories.map((itemCategories, i) => {
                    if(itemCategories.category_id==arr.id){
                         this.setCategoryValues(itemCategories.price,index,arr.id);
                    }

                  })
          console.log('-----------End----------------')

        })

     
   }





   async  getUnits() {
    let netState = await NetInfo.fetch();
    if (netState.isConnected) {
      try {
        let response = await fetch(
          CONSTANTS.ALL_UNITS_API_DROPDOWN+'/?company_id='+this.props.userInfo.company_id,{method: 'POST'}
        );
         let json = await response.json();
          return json.data;
      } catch (error) {
        console.log(error);
        return [];
      }
    } else {
      Alert.alert("", i18n.translations.network_err_msg)
      return [];
    }
  }    
   

   async  getCategories() {
    let netState = await NetInfo.fetch();
    if (netState.isConnected) {
      try {
        let response = await fetch(
          CONSTANTS.ALL_CATEGORY_DROPDOWN_API+'/?company_id='+this.props.userInfo.company_id,{method: 'POST'}
        );
         let json = await response.json();
          return json.data;
      } catch (error) {
        console.log(error);
        return [];
      }
    } else {
      Alert.alert("", i18n.translations.network_err_msg)
      return [];
    }    
  }
   
      async  getItemCategories() {
        let netState = await NetInfo.fetch();
        if (netState.isConnected) {
          try {
            let response = await fetch(
              CONSTANTS.ALL_CATEGORY_ITEMS_API+'/?company_id='+this.props.userInfo.company_id+'&item_id='+this.state.id,{method: 'GET'}
            );
             let json = await response.json();
              return json.data;
          } catch (error) {
            console.log(error);
            return [];
          }
        } else {
          Alert.alert("", i18n.translations.network_err_msg)
          return [];
        }
           
     }
   



  componentWillUnmount() {
    this._unsubscribe();
  }
 

  async  editItemsApiCall() {
    let netState = await NetInfo.fetch();
    if (netState.isConnected) {
      try {
        formData = new FormData();
       
        formData.append('name',this.state.name); 
        formData.append('price',this.state.price); 
        formData.append('description',this.state.description); 
        formData.append('category',this.state.category.toString()); 
        formData.append('category_ids',this.state.category_ids.toString()); 
        formData.append('unit',this.state.unit); 
        formData.append('company_id',this.state.company_id); 
        formData.append('auth_token',this.state.auth_token); 

        let response = await fetch(
          CONSTANTS.UPDATE_ITEM_API,
          { 
            headers: {
              'Accept': 'application/json',
              'Content-Type': 'multipart/form-data'
            },
            method: 'POST',
            body:formData
          }
        );
        let json = await response.json();
          console.log(json);
            return json;

      } catch (error) {
        Alert.alert("", i18n.translations.server_connect_error)
      }
    } else {
      Alert.alert("", i18n.translations.network_err_msg)
    }
  }



  async editItems(){
    try {
         
         




            if(this.state.name==''){
                    this.setState({
                      notificationTitle:'',
                      notificationMessage:'Please enter  name'
                    })
                    this.AlertPro.open()
                    return false;
            }             

            if(this.state.price==''){
                    this.setState({
                      notificationTitle:'',
                      notificationMessage:'Please enter  price'
                    })
                    this.AlertPro.open()
                    return false;
            }             
             if(this.state.unit==''){
                    this.setState({
                      notificationTitle:'',
                      notificationMessage:'Please enter  unit'
                    })
                    this.AlertPro.open()
                    return false;
            }                        
          
    


           this.setState({isDisabled:true})
           var user=  await this.editItemsApiCall();
           this.setState({isDisabled:false})
            if(uesr && user.responseCode !=200){
            var data=user.data
              var err='';
               
                if (typeof data.name != "undefined" && typeof data.name[0] != "undefined") { err=err+' Please enter an  price ';}
                   this.setState({
                    notificationTitle:'Some error occured',
                    notificationMessage:err
                  })
                
                if (typeof data.unit != "undefined" && typeof data.unit[0] != "undefined") { err=err+' Please enter an  price ';}
                   this.setState({
                    notificationTitle:'Some error occured',
                    notificationMessage:err
                  })

                if (typeof data.price != "undefined" && typeof data.price[0] != "undefined") { err=err+' Please enter an  price ';}
                   this.setState({
                    notificationTitle:'Some error occured',
                    notificationMessage:err
                  })
 
                  this.AlertPro.open()
            }else if(user) {
               this.props.pageRefersh('refresh');
               this.setState({
                    name:'',
                })
               this.props.pageRefersh('refresh');
               this.props.navigation.navigate('Items')
            }
        } catch (error) {
          console.error(error);
        }

    //this.setState({'isDisabled':true})
  }
   setCategoryValues(cat,index,id){
            let cats= this.state.category
            let cats_ids= this.state.category_ids
            cats[index]=cat
            cats_ids[index]=id
            this.setState({category:cats})    
            this.setState({category_ids:cats_ids})    
            // console.log(this.state.category)
            // console.log(this.state.category_ids)

   }
    
  render() {

    return (
      <ScrollView style={styles.container}>
        <View style={{flax:1,flexDirection: 'row',alignItems: 'center',
    justifyContent: 'space-around',borderBottomWidth:1,borderColor:colors.primaryLight}} >
           <View style={{flax:1,width: '90%',padding:15}} >
                    <Text style={{'color':colors.primaryLight,fontSize:18,fontWeight:'600' }}>
                      Edit Item
                    </Text>
                 </View>
                 <View style={{flax:1,width: '10%'}} >
                 <TouchableOpacity disabled={this.state.isDisabled}  onPress={() => this.editItems()} >
                       <Image
                        resizeMode="contain"
                        source={saveIcon}
                       />
                </TouchableOpacity>
                </View>
        </View>
       <View style={{paddingTop:30}}>
            <View style={{padding:15,paddingTop:3}}>
               <Text style={styles.text}>
                  Name
                  <Text style={styles.required}>*</Text>
                </Text>
                 <TextInput value={this.state.name}  style={styles.inputs} onChangeText={(name) => this.setState({name:name})}  />

             </View>

          <View style={{padding:15,paddingTop:3}}>
               <Text style={styles.text}>
                  Price
                  <Text style={styles.required}>*</Text>
                </Text>
                <TextInput value={this.state.price}  style={styles.inputs} onChangeText={(price) => this.setState({price:price})}  />
           </View>
      
            <View style={{padding:15,paddingTop:3}}>
               <Text style={styles.text}>
                 Unit
                </Text>
      <View style={{ borderColor: colors.primaryLight,borderWidth: 1,borderRadius:2,height:40}}> 

       <RNPickerSelect
             placeholder={{
              label: 'Select Unit',
              value: null,
              color: 'red',
            }}
               style={{
              ...pickerSelectStyles,
              iconContainer: {
                top: 20,
                left: 10,
              },
              placeholder: {
                color: colors.primaryLight,
                fontSize: 16,
                paddingLeft:60,
               },
            }}
            value={this.state.unit}
            onValueChange={(unit) => this.setState({unit:unit})}
            items= {this.state.units}

            Icon={() => {
              return (
                <View
                  style={{
                    backgroundColor: 'transparent',
                    borderTopWidth: 10,
                    borderTopColor: colors.primaryLight,
                    borderRightWidth: 10,
                    borderRightColor: 'transparent',
                    borderLeftWidth: 10,
                    borderLeftColor: 'transparent',
                    width: 0,
                    height: 0,
                   }}
                />
              );
            }}
        />
</View>
        </View>
            <View style={{padding:15,paddingTop:3}}>
               <Text style={styles.text}>
                 Description
                </Text>
                <TextInput multiline={true} numberOfLines={4}
                          value={this.state.description} 
                          onChangeText={(description) => this.setState({description:description})}
                           style={{borderWidth:1,height:60,color:colors.primary,
                          padding:10,
                          borderWidth:.5,
                          borderRadius:2,
                          borderColor:colors.primary}}   />
             </View>

            <Text style={{paddingTop:20,paddingLeft:15, fontSize:20,marginBottom:10}}>Add pricing based on vehical type:</Text>
                {this.state.categories.map((arr, index) => {
                     return(
                        <View>
                          <View style={{padding:15,paddingTop:3}}>
                               <Text style={styles.text}>
                                  {arr.name}
                                 </Text>
                                <TextInput value={this.state.category[index]}  style={styles.inputs} onChangeText={(value) => this.setCategoryValues(value,index,arr.id)}  />
                           </View>
                        </View>
                    )
                })}
 










              <View style={{padding:15,paddingTop:5}}>
                <TouchableOpacity disabled={this.state.isDisabled}  onPress={() => this.editItems()}  style={{justifyContent:"center",alignItems:'center',backgroundColor:colors.primaryLight,borderRadius:2,padding:10}}>
                     <Text style={{color:'white',fontSize:18}}>Save</Text>
                </TouchableOpacity>
             </View>
            <View style={{padding:40}}></View>
       </View>

        <AlertPro
          ref={ref => {
            this.AlertPro = ref;
          }}
          showCancel={false}
          onConfirm={() => this.AlertPro.close()}
          title={this.state.notificationTitle}
          message={this.state.notificationMessage}
          textCancel="Cancel"
          textConfirm="Ok"
          customStyles={{
            mask: {
              backgroundColor: "transparent"
            },
            title:{
              color:'#e060a8',
              fontSize:25,

            },
            message: {
                color:'blue',
                 fontSize:20,
             },
            container: {
              shadowColor: "#000000",
              shadowOpacity: 0.1,
              shadowRadius: 10,
              textClor:'#e060a8'
            },
         
            buttonConfirm: {
              backgroundColor: "#e060a8"
            }
          }}
        />
      </ScrollView>
    );
  }
}
 

const mapStateToProps = state => ({...state.app})

const mapDisptachToProps = dispatch => {
  return {
    pageRefersh: (data) => dispatch({type: SET_PAGE_REFERSH, data}),
    setHeaderRightIconShow: (data) => dispatch({type: SET_RIGHT_ICON_SHOW, data})
  }
}
export default connect(mapStateToProps, mapDisptachToProps)(ItemseditScreen)
 

 

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: colors.white,
   },
  row: {
    flexDirection: 'row',
    paddingHorizontal: 10,
    marginTop: 10,
  },
  item: {
    flex: 1,
    flexDirection: 'row',
    marginBottom:5,
    paddingVertical: 15,
    borderColor: colors.primaryLight,
    borderWidth: 1,
    borderRadius: 2,
    alignItems: 'center',
    justifyContent: 'space-around',
    marginHorizontal: 10,
  },
   separator: {
    height: 0.5,
    backgroundColor: 'rgba(0,0,0,0.4)',
  },
  text: {
    fontSize: 16,
    marginBottom:5,
    color: colors.primary,
  },
  required:{
    color:'red',
    marginLeft:15,
    fontSize: 20,
  },
  itemText: {
    color: colors.primary,
    fontFamily: fonts.primary,
  },
  itemImage: {
    height: 35,
  },
  inputs:{
    height:40,
    flex:1,
    color:colors.primaryLight,
    padding:10,
    borderWidth:.5,
    borderRadius:2,
    borderColor:colors.primaryLight,
},
  inputContainer: {
    borderBottomColor: '#F5FCFF',
    backgroundColor: '#FFFFFF',
    borderRadius:4,
    borderBottomWidth: 1,
    width:'100%',
    height:60,
    marginBottom:5,
    flexDirection: 'row',
    alignItems:'center'
},
  footer: {
    padding: 10,
    justifyContent: 'center',
    alignItems: 'center',
    flexDirection: 'row',
  },
});

 const pickerSelectStyles = StyleSheet.create({
  inputIOS: {
    fontSize: 16,
    paddingVertical: 10,
    paddingHorizontal: 10,
     
    color: colors.primaryLight,
    paddingLeft: 40, // to ensure the text is never behind the icon
  },
  inputAndroid: {
    fontSize: 16,
    top:-6,
    paddingVertical: 12,
    paddingHorizontal: 10,
    color: colors.primaryLight,
    marginLeft:40,
  },
});